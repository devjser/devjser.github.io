<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟前端的日常</title>
  
  
  <link href="https://devjser.github.io/atom.xml" rel="self"/>
  
  <link href="https://devjser.github.io/"/>
  <updated>2024-01-17T05:44:00.917Z</updated>
  <id>https://devjser.github.io/</id>
  
  <author>
    <name>devjser</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSR, CSR, SSG解释</title>
    <link href="https://devjser.github.io/2024/01/16/SSR,SSG,CSR/"/>
    <id>https://devjser.github.io/2024/01/16/SSR,SSG,CSR/</id>
    <published>2024-01-16T14:00:00.000Z</published>
    <updated>2024-01-17T05:44:00.917Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SSR-Server-side-rendering，服务端渲染"><a href="#SSR-Server-side-rendering，服务端渲染" class="headerlink" title="SSR (Server-side rendering，服务端渲染)"></a>SSR (Server-side rendering，服务端渲染)</h4><ul><li>SSR 是指在服务端生成 HTML，将其发送到客户端，客户端只需要进行简单的渲染即可完成页面显示。</li><li>优点 <ul><li>可以提高页面的首屏渲染速度和 SEO 的效果。</li><li>对于搜索引擎的爬虫也更加友好，可以更容易地被搜索引擎收录和排名</li><li>更好的社交媒体分享</li></ul></li><li>缺点<ul><li>是对服务端的压力较大，因为每次请求都需要服务端进行渲染，所以对服务器的要求比较高</li><li>对于复杂的交互和动态效果的支持相对较弱。</li></ul></li></ul><h4 id="CSR-Client-side-rendering，客户端渲染"><a href="#CSR-Client-side-rendering，客户端渲染" class="headerlink" title="CSR (Client-side rendering，客户端渲染)"></a>CSR (Client-side rendering，客户端渲染)</h4><ul><li>CSR 是指在客户端通过 JavaScript 来渲染页面，将数据从服务器请求回来后再通过 JavaScript 来生成 HTML，并将其插入到页面中</li><li>优点<ul><li>是可以提高网站的交互性能，用户在与页面交互时无需进行页面刷新</li><li>对于复杂的交互和动态效果的支持较好，可以更好地实现单页面应用程序 (SPA)。</li></ul></li><li>缺点<ul><li>会降低首屏渲染速度</li><li>对于 SEO 的支持较弱</li></ul></li></ul><h4 id="SSG-Static-Site-Generation，静态站点生成"><a href="#SSG-Static-Site-Generation，静态站点生成" class="headerlink" title="SSG (Static Site Generation，静态站点生成)"></a>SSG (Static Site Generation，静态站点生成)</h4><ul><li>SSG 是指将网站的所有页面在构建时生成 HTML 静态文件，然后通过服务器或 CDN 进行分发</li><li>这样可以避免服务端的渲染压力，并且能够实现极快的页面加载速度。</li><li>优点<ul><li>是可以在静态页面中实现动态数据的渲染</li><li>同时对于 SEO 的支持也非常好</li><li>更高的安全性,更低的托管成本</li></ul></li><li>缺点<ul><li>需要更新数据时，需要重新构建并部署，因此对于频繁更新数据的网站可能不太适合。</li><li>对于复杂的交互和动态效果的支持也比较有限。</li></ul></li></ul><h4 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h4><ul><li><a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></li></ul><h3 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h3><ul><li>元标签和结构化数据：确保所有页面都有适当的<title>、<meta name="description">标签以及结构化数据（如Schema.org），以便搜索引擎理解页面内容。</li><li>内容优先：在HTML中，内容应该位于前面，而不是被大量的JavaScript或样式代码所覆盖。</li><li>语义化的HTML标签：使用正确的HTML标签（如<header>、<footer>、<article>等）来帮助搜索引擎理解页面结构。</li><li>优化URL结构：使用清晰、描述性的URL，避免过长或含有大量参数的URL。</li><li>使用SSL：确保网站使用HTTPS，这是搜索引擎排名的一个因素。</li><li>移动友好：确保网站对移动设备友好，使用响应式设计，并通过Google的移动友好测试。</li><li>减少重定向：尽量减少页面重定向，因为它们可能会减慢页面加载速度并影响用户体验。</li><li>优化图片：确保所有图片都有alt属性，并对图片进行压缩以减少加载时间。</li><li>增强内链：在网站内部合理设置锚文本和链接，以帮助搜索引擎抓取更多页面。</li><li>监控和分析：使用工具如Google Search Console和Google Analytics来监控SEO表现，并根据数据进行优化。</li></ul><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><ul><li><a href="https://zhuanlan.zhihu.com/p/365113639">ssr,ssg,csr参考</a></li><li><a href="https://zhuanlan.zhihu.com/p/260957368">静态网站生成</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;SSR-Server-side-rendering，服务端渲染&quot;&gt;&lt;a href=&quot;#SSR-Server-side-rendering，服务端渲染&quot; class=&quot;headerlink&quot; title=&quot;SSR (Server-side rendering，服务端</summary>
      
    
    
    
    
  </entry>
  
</feed>
